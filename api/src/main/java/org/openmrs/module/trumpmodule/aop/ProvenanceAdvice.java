package org.openmrs.module.trumpmodule.aop;

import java.lang.reflect.Method;
import java.util.UUID;

import luca.tmac.basic.data.uris.ProvenanceStrings;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.openmrs.OpenmrsData;
import org.openmrs.User;
import org.openmrs.api.context.Context;
import org.openmrs.module.trumpmodule.OpenmrsEnforceServiceContext;
import org.openmrs.util.OpenmrsUtil;

import uk.ac.dotrural.prov.jena.ProvenanceBundle;

import com.hp.hpl.jena.query.Dataset;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.tdb.TDBFactory;


public class ProvenanceAdvice implements MethodInterceptor {
	
	private Dataset dataset;
	
	OpenmrsEnforceServiceContext openmrsContext = OpenmrsEnforceServiceContext.getInstance();
	private String directory = openmrsContext.getProvenanceDirectory();

	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		Method method = invocation.getMethod();
		String name = method.getName();
		// data object resulting from this captured method invocation that we will store provenance about
		Object result = null;
		// decide what type of logging we're doing with the current method and loglevel
		if (OpenmrsUtil.stringStartsWith(name, ProvenanceStrings.SETTER_METHOD_PREFIXES)) {
			// used for the execution time calculations
			long startTime = System.currentTimeMillis();
			
			//System.out.println("the directory of provenance is : " + directory);
			dataset = TDBFactory.createDataset(directory);
			
			ProvenanceBundle provBundle = new ProvenanceBundle(ProvenanceStrings.NS);
			//insert to TDB
			
			//1. activity has one property: action_name
			String activityURI = provBundle.createActivity(ProvenanceStrings.NS +ProvenanceStrings.ACTIVITY_PATIENT + UUID.randomUUID().getMostSignificantBits());
			Resource activity = provBundle.getResource(activityURI);
			
			// create a new action property, if it doesn't already exist, which
			// is just the name of the invoked method
			Property actionProp = provBundle.getModel().createProperty(ProvenanceStrings.NS, ProvenanceStrings.ACTIVITY_NAME);
			activity.addProperty(actionProp, name);

			//2. agent - comes from the logged in user or the user who is invoking the method
			User user = Context.getAuthenticatedUser();
			String agentURI = provBundle.createAgent(ProvenanceStrings.NS + ProvenanceStrings.AGENT_USER + user.getId());
			Resource agent = provBundle.getResource(agentURI);

			// NOW: we need to execute the method to actually get the created
			// entity details
			result = (OpenmrsData) invocation.proceed();
			

			//3. entity - comes from the uuid of the newly created patient (the
			// entity is not an agent, it represents the new record)
			// we are recording the fact that some agent (i.e. the logged in
			// user) is doing an activity (i.e. createPatient) which is
			// resulting in some entity being created (i.e. a new patient record
			// with a UUID) -
			// i.e. from the result we just got
			String entityURI = provBundle.createEntity(ProvenanceStrings.NS + ProvenanceStrings.ENTITY_PATIENT + ((OpenmrsData) result).getId());
			
			Resource entity = provBundle.getResource(entityURI);
			// entity has an property : patient_uuid
			Property entityProp = provBundle.getModel().createProperty(ProvenanceStrings.NS, ProvenanceStrings.PATIENT_UUID);
			entity.addProperty(entityProp, ((OpenmrsData) result).getUuid());

			// add statement describing when the activity started
			provBundle.addStartedAtTime(activity, startTime);
			// add statement describing when the activity ended.
			provBundle.addEndedAtTime(activity, System.currentTimeMillis());
			
			//the activity was started by the agent. 
			provBundle.addWasStartedBy(activity, agent);
			//the entity was generated by the activity
			provBundle.addWasGeneratedBy(entity, activity);
			//the entity was attributed to the agent
			provBundle.addWasAttributedTo(entity, agent);

			provBundle.getModel().write(System.out);

			Model model = dataset.getDefaultModel();

			model.add(provBundle.getModel());

			dataset.close();
			
		} else {
			// if we're not interested in capturing provenance for this method, still let it proceed
			result = invocation.proceed();
		}
		return result;
		
	}
}
	


